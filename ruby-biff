#!/usr/bin/ruby
# -*- coding: utf-8 -*-
#
# biff.rb
#

require 'rubygems'
require 'net/pop'
require 'highline'
require 'base64'
require 'nkf'
require 'yaml'
require 'yaml/store'


# Constants
CONFIG_DIR="#{ENV['HOME']}/.biff"
CACHE_DIR="/Volumes/ramdisk/.Caches"


#======================================================================
class Growl
  def notify(title, message=[], icon_path=nil, app_icon=nil)
    command = "growlnotify '#{title}' -m '"
    message.each do |msg|
      command += "#{msg}\n"
    end
    command += "'"

    if icon_path
      command += " -i #{icon_path}"
    end
    if app_icon
      command += " -a #{app_icon}"
    end

    system("#{command}")
    system("date")
    print "#{command}\n"
  end
end


#======================================================================
class Account
  DEFAULT_PORT          = 110
  DEFAULT_MAX_COUNT     = 3

  attr_reader :host, :port, :user, :pass, :cnt
  
  @host         = ""
  @port         = ""
  @user         = ""
  @pass         = ""
  @cnt          = ""

  #--------------------------------------------------
  def initialize(config_path, yml_file)
    @config_path = config_path
    @yml_file = "#{config_path}/#{yml_file}"

    # yamlがない場合は即return
    if !exist?
      return
    end

    # yamlから情報を取得する
    File.open(@yml_file) do |io|
      YAML.load_documents(io) do |y|
        # POPホスト名
        if defined? y['host']
          @host = y['host']
        end
        # ポート番号
        if defined? y['port']
          @port = y['port']
        else
          # なければデフォルトを使用
          @port = DEFAULT_PORT
        end
        # ユーザ名
        if defined? y['user']
          @user = y['user']
        end
        # 最大表示数
        if defined? y['cnt']
          @cnt = y['cnt']
        else
          @cnt = DEFAULT_MAX_COUNT
        end
        # パスワード
        if defined? y['pass']
          @pass = Base64.decode64(y['pass'])
        end
      end
    end
  end

  #--------------------------------------------------
  def create
    host = HighLine.new.ask('POP host: ')
    port = HighLine.new.ask('Port (empty to use default): ')
    user = HighLine.new.ask('User: ')
    pass = Base64.encode64(HighLine.new.ask('Password: ') {|q| q.echo = '*' })
    cnt = HighLine.new.ask('Max number to be displayed (empty to use #{DEFAULT_MAX_COUNT}): ')

    if !valid?(host, port, user, pass, cnt)
      print "Invalid host, port, user, password or max count.\n"
      return false
    end

    # ディレクトリがなければ作成する
    if FileTest.exist?(@config_path)
      if FileTest::directory?(@config_path)
      else
        print "#{@config_path} is not a directory\n"
        exit
      end
    else
      Dir.mkdir(@config_path)
    end

    # YAMLファイルを作成
    yml = File.open(@yml_file, 'w')
    yml.puts "host: #{host}"
    if !port || port == ""
      port = DEFAULT_PORT
    end
    yml.puts "port: #{port.to_i}"
    yml.puts "user: #{user}"
    yml.puts "pass: #{pass}"
    if !cnt || cnt == ""
      cnt = DEFAULT_MAX_COUNT
    end
    yml.close

    @host       = host
    @port       = port
    @user       = user
    @pass       = pass
    @cnt        = cnt

    return true
  end

  #--------------------------------------------------
  def valid?(host=@host, port=@port, user=@user, pass=@pass, cnt=@cnt)
    # portとcnt以外は必須
    if (host == "" || user == "" || pass == "")
      return false
    end

    # port, cntがある場合は数字
    if !port && port != ""
      if port !~ /^[0-9]+$/
        return false
      end
    end
    if !cnt && cnt != ""
      if cnt !~ /^[0-9]+$/
        return false
      end
    end

    return true
  end

  #--------------------------------------------------
  def exist?
    # ファイルがない場合はfalse
    if !FileTest.exist?(@yml_file)
      return false
    end
    # パスは存在するけどファイルじゃない場合はfalse
    if !FileTest::file?(@yml_file)
      return false
    end
    return true
  end
end


#======================================================================
class ReadMails

  #--------------------------------------------------
  def initialize(tmp_path, mails_file)
    @tmp_path = tmp_path
    @mails_file = "#{tmp_path}/#{mails_file}"

    # ディレクトリが無ければ作成
    if FileTest.exist?(@tmp_path)
      # ディレクトリじゃないパスの場合はエラー終了
      if !FileTest::directory?(@tmp_path)
        return
      end
    else
      Dir.mkdir(@tmp_path)
    end

    # ファイルじゃないパスが存在する場合はエラー終了
    if !FileTest::file?(@mails_file)
      return
    end
  end

  #--------------------------------------------------
  def append(message_id)
    retrieve_mails
    if !@mails
      @mails = []
    end
    @mails << message_id
    @mails.uniq!
    update_mails
  end

  #--------------------------------------------------
  def remove(message_id)
    retrieve_mails
    if @mails != nil
      @mails.delete(message_id)
    end
    update_mails
  end

  #--------------------------------------------------
  def unread?(message_id)
    retrieve_mails
    mails = @mails
    if @mails == nil
      return true
    end
    if @mails.delete(message_id) == nil
      return true
    else
      return false
    end
  end

  #--------------------------------------------------
  def overwrite(message_ids)
    @mails = message_ids
    @mails.uniq!
    update_mails
  end

  #==================================================
  private
  def retrieve_mails
    mails_db = YAML::Store.new(@mails_file)
    mails_db.transaction do
      @mails = mails_db["mails"]
    end
  end

  #==================================================
  private
  def update_mails
    mails_db = YAML::Store.new(@mails_file)
    mails_db.transaction do
      mails_db["mails"] = @mails
    end
  end
end # class ReadMails


#======================================================================
class MailHeader
  attr_accessor :subject, :from, :message_id

  #--------------------------------------------------
  def initialize(header)
    @subject    = NKF.nkf('-wLu', header.match(/^Subject:\s+(.*)/i)[1]).chop
    @from       = NKF.nkf('-wLu', header.match(/^From:\s+(.*)/i)[1]).chop
    @message_id = NKF.nkf('-wLu', header.match(/^Message\-Id:\s+(.*)/i)[1]).chop
  end
end # class MailHeader


#======================================================================

account = Account.new(CONFIG_DIR, "config.yml")
if !account.exist?
  while !account.create
  end
end


current_mails=[]
Net::POP3.start(account.host, account.port, account.user, account.pass)  do |pop|
  current_mails = pop.mails.collect {|m| m.header}
end

if current_mails.empty?
  exit
end


read_mails = ReadMails.new(CACHE_DIR, ".mails.yml")
unread_headers = []
message_ids = []
current_mails.each do |m|
  header = MailHeader.new(m)
  message_ids << header.message_id
  if read_mails.unread?(header.message_id)
    unread_headers << header
  end
end
read_mails.overwrite(message_ids)

if unread_headers.empty?
  exit
end


cnt = account.cnt
message = []
unread_headers.each do |m|
  # cnt回表示した後にまだメールがある場合は「n more mails」
  if cnt <= 0
    message << ""
    message << "#{unread_headers.length - account.cnt} more mails..."
    break
  end

  message << "#{m.from}"
  message << "#{m.subject}"
  cnt -= 1
end

growl = Growl.new
growl.notify("New Mail", message, nil, "Mail.app")
